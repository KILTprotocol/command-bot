variables:
  REPO: /repo
  IMAGE_REPOSITORY: docker.io/paritytech/try-runtime-bot
  CI_IMAGE: ${IMAGE_REPOSITORY}:ci
  KUBE_NAMESPACE: try-runtime
  DEPLOYMENT_TAG: ${CI_ENVIRONMENT_NAME}_${CI_COMMIT_TAG}
  DATA_PATH: /data
  PING_PORT: 3001
  TASK_DB_VERSION: v3

default:
  image: $CI_IMAGE
  tags:
    -  kubernetes-parity-build

.on-pr-and-master: &on-pr-and-master
  rules:
    - if: $BUILD
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.on-tags: &on-tags
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v-[0-9]+\.[0-9]+.*$/             # i.e. v-1.0, v-2.1rc1

.on-master: &on-master
  rules:
    - if: $BUILD
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"

stages:
  - test
  - containerize
  - deploy

test:
  <<: *on-pr-and-master
  stage: test
  script:
    - echo deb http://deb.debian.org/debian buster-backports main | tee /etc/apt/sources.list.d/buster-backports.list
    - apt-get update
    - apt-get install -t buster-backports git openssl -y
    - apt-get install wget gpg ca-certificates software-properties-common -y
    - git --version
    - wget https://github.com/mvdan/sh/releases/download/v3.5.0/shfmt_v3.5.0_linux_amd64 -O /bin/shfmt &&
      echo "8feea043364a725dfb69665432aee9e85b84c7f801a70668650e8b15452f6574  /bin/shfmt" | sha256sum --check &&
      chmod +x /bin/shfmt &&
      shfmt --version
    - apt-key list
    - yarn --immutable
    - pre-commit run --color=always --all
    - git config --global user.email "ci@parity.io"
    - git config --global user.name "ci_parity_io"
    - yarn test

#### App deployment

.kubernetes: &kubernetes
  image: paritytech/kubetools:helm3

.build-app-image: &build-app-image
  image: quay.io/buildah/stable
  script:
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - ./scripts/generateDockerfile app |
      buildah bud
      --format=docker
      --build-arg "REPO=$REPO"
      -v "$PWD:$REPO"
      --tag "$IMAGE_REPOSITORY:$DEPLOYMENT_TAG"
      -
    - buildah push --format=v2s2 "$IMAGE_REPOSITORY:$DEPLOYMENT_TAG"
  after_script:
    - buildah logout --all

.deploy-k8s: &deploy-k8s
  <<: *kubernetes
  interruptible: true
  script:
    # Change the app version during build so that Kubernetes is able to update
    # the deployment even if the images' tags did not change
    # $CI_PIPELINE_ID is guaranteed to be unique
    - export KUBERNETES_VERSION_TAG="$CI_PIPELINE_ID"
    # Those values are embedded in the annotations and that's how the change is
    # noticed
    - |-
      sed -i "s/version:.*/version: $KUBERNETES_VERSION_TAG/" helm/Chart.yaml
    - |-
      sed -i "s/appVersion:.*/appVersion: $KUBERNETES_VERSION_TAG/" helm/Chart.yaml
    - helm upgrade --install "$KUBE_NAMESPACE" ./helm
      --values helm/values.yaml
      --namespace "$KUBE_NAMESPACE"
      --set image.repository="$IMAGE_REPOSITORY"
      --set image.tag="$DEPLOYMENT_TAG"
      --set env.APP_ID="$APP_ID"
      --set env.CLIENT_ID="$CLIENT_ID"
      --set env.CLIENT_SECRET="$CLIENT_SECRET"
      --set env.WEBHOOK_SECRET="$WEBHOOK_SECRET"
      --set env.PRIVATE_KEY_BASE64="$PRIVATE_KEY_BASE64"
      --set env.ALLOWED_ORGANIZATIONS="$ALLOWED_ORGANIZATIONS"
      --set env.DATA_PATH="$DATA_PATH"
      --set persistence.mountPath="$DATA_PATH"
      --set env.IS_DEPLOYMENT="true"
      --set env.TMPDIR="$DATA_PATH/tmp"
      --set env.TASK_DB_VERSION="$TASK_DB_VERSION"
      --set env.PING_PORT="$PING_PORT"
      --set env.MATRIX_HOMESERVER="$MATRIX_HOMESERVER"
      --set env.MATRIX_ACCESS_TOKEN="$MATRIX_ACCESS_TOKEN"
      --set env.MASTER_TOKEN="$MASTER_TOKEN"
      --set env.GITLAB_ACCESS_TOKEN="$GITLAB_ACCESS_TOKEN"
      --set env.GITLAB_ACCESS_TOKEN_USERNAME="$GITLAB_ACCESS_TOKEN_USERNAME"
      --set env.LOG_FORMAT=json

.uninstall-deployment: &uninstall-deployment
  <<: *kubernetes
  stage: deploy
  interruptible: true
  script:
    - helm uninstall "$KUBE_NAMESPACE" --namespace "$KUBE_NAMESPACE"

#### > Production deployment

#### >> Manual

.production-env: &production-env
  environment:
    name: parity-chains

build-production-image-manual:
  <<: *build-app-image
  <<: *production-env
  stage: containerize
  rules:
    - if: "$BUILD == 'production'"

deploy-production-manual:
  <<: *deploy-k8s
  <<: *production-env
  stage: deploy
  rules:
    - if: '$BUILD == "production" || $DEPLOY == "production"'

uninstall-production:
  <<: *uninstall-deployment
  <<: *production-env
  rules:
    - if: "$UNINSTALL == 'production'"

#### >> Automatic

.tagged-production-build: &tagged-production-build
  <<: *production-env
  <<: *on-tags

build-production-image:
  <<: *build-app-image
  <<: *tagged-production-build
  stage: containerize

deploy-production:
  <<: *deploy-k8s
  <<: *tagged-production-build
  stage: deploy

#### CI images

.build-ci-image: &build-ci-image
  image: quay.io/buildah/stable
  script:
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - ./scripts/generateDockerfile ci |
      buildah bud
      --format=docker
      --tag "$CI_IMAGE" -
    - buildah push --format=v2s2 "$CI_IMAGE"
  after_script:
    - buildah logout --all

build-ci-image-manual:
  <<: *build-ci-image
  stage: containerize
  rules:
    - if: "$BUILD == 'ci'"

build-ci-image:
  <<: *on-master
  <<: *build-ci-image
  stage: containerize
  allow_failure: true
