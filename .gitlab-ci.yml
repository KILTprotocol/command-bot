stages:
  - containerize
  - test
  - build
  - deploy

variables:
  IMAGE_NAME:                      docker.io/paritytech/command-bot
  CI_IMAGE:                        ${IMAGE_NAME}:ci
  KUBE_NAMESPACE:                  try-runtime
  DEPLOYMENT_TAG:                  ${CI_ENVIRONMENT_NAME}_${CI_COMMIT_TAG}
  DATA_PATH:                       /data
  PING_PORT:                       3001
  TASK_DB_VERSION:                 v3
  DOCKERFILE:                      ./scripts/Dockerfile

default:
  image: $CI_IMAGE
  tags:
    -  kubernetes-parity-build
  interruptible:                   true
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure

.common-refs:                      &common-refs
  rules:
    - if: $BUILD
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.test-refs:                        &test-refs
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.tags-refs:                        &tags-refs
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v-[0-9]+\.[0-9]+.*$/             # i.e. v-1.0, v-2.1rc1

.master-refs:                      &master-refs
  rules:
    - if: $BUILD
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"

# test that docker image can be built
.build-only-docker-image:          &build-only-docker-image
  image:                           quay.io/buildah/stable
  script:
    - buildah bud
          --format=docker
          --target="$TARGET"
          --build-arg "REPO=$REPO"
          --tag "$IMAGE_NAME:$DEPLOYMENT_TAG"
          --file "$DOCKERFILE" .

.test-lint:
  <<:                              *common-refs
  stage:                           test
  script:
    - yarn --immutable
    - pre-commit run --color=always --all

.test-unit:
  <<:                              *common-refs
  stage:                           test
  script:
    - yarn --immutable
    - yarn test:unit

.test-integration:
  <<:                              *common-refs
  stage:                           test
  script:
    - yarn --immutable
    - yarn test:integration

build-docker-app:
  stage:                           build
  <<:                              *test-refs
  <<:                              *build-only-docker-image
  variables:
    TARGET:                        app

#### App deployment

.build-app-image:                  &build-app-image
  image:                           quay.io/buildah/stable
  script:
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - buildah bud
      --format=docker
      --target=app
      --tag "$IMAGE_NAME:$DEPLOYMENT_TAG"
      --file $DOCKERFILE .
    - buildah push --format=v2s2 "$IMAGE_NAME:$DEPLOYMENT_TAG"
  after_script:
    - buildah logout --all

.deploy-k8s:                       &deploy-k8s
  image:                           paritytech/kubetools:helm3
  script:
    # Change the app version during build so that Kubernetes is able to update
    # the deployment even if the images' tags did not change
    # $CI_PIPELINE_ID is guaranteed to be unique
    - export KUBERNETES_VERSION_TAG="$CI_PIPELINE_ID"
    # Those values are embedded in the annotations and that's how the change is
    # noticed
    - |-
      sed -i "s/version:.*/version: $KUBERNETES_VERSION_TAG/" helm/Chart.yaml
    - |-
      sed -i "s/appVersion:.*/appVersion: $KUBERNETES_VERSION_TAG/" helm/Chart.yaml
    - helm upgrade --install "$KUBE_NAMESPACE" ./helm
      --values helm/values.yaml
      --namespace "$KUBE_NAMESPACE"
      --set image.repository="$IMAGE_NAME"
      --set image.tag="$DEPLOYMENT_TAG"
      --set env.APP_ID="$APP_ID"
      --set env.CLIENT_ID="$CLIENT_ID"
      --set env.CLIENT_SECRET="$CLIENT_SECRET"
      --set env.WEBHOOK_SECRET="$WEBHOOK_SECRET"
      --set env.PRIVATE_KEY_BASE64="$PRIVATE_KEY_BASE64"
      --set env.ALLOWED_ORGANIZATIONS="$ALLOWED_ORGANIZATIONS"
      --set env.DATA_PATH="$DATA_PATH"
      --set persistence.mountPath="$DATA_PATH"
      --set env.IS_DEPLOYMENT="true"
      --set env.TMPDIR="$DATA_PATH/tmp"
      --set env.TASK_DB_VERSION="$TASK_DB_VERSION"
      --set env.PING_PORT="$PING_PORT"
      --set env.MATRIX_HOMESERVER="$MATRIX_HOMESERVER"
      --set env.MATRIX_ACCESS_TOKEN="$MATRIX_ACCESS_TOKEN"
      --set env.MASTER_TOKEN="$MASTER_TOKEN"
      --set env.GITLAB_ACCESS_TOKEN="$GITLAB_ACCESS_TOKEN"
      --set env.GITLAB_ACCESS_TOKEN_USERNAME="$GITLAB_ACCESS_TOKEN_USERNAME"
      --set env.LOG_FORMAT=json

.uninstall-deployment:             &uninstall-deployment
  image:                           paritytech/kubetools:helm3
  stage:                           deploy
  script:
    - helm uninstall "$KUBE_NAMESPACE" --namespace "$KUBE_NAMESPACE"

#### > Production deployment

#### >> Manual

.production-env:                   &production-env
  environment:
    name: parity-chains

build-production-image-manual:
  <<:                              *build-app-image
  <<:                              *production-env
  stage:                           containerize
  rules:
    - if: "$BUILD == 'production'"

deploy-production-manual:
  <<:                              *deploy-k8s
  <<:                              *production-env
  stage:                           deploy
  rules:
    - if: '$BUILD == "production" || $DEPLOY == "production"'

uninstall-production:
  <<:                              *uninstall-deployment
  <<:                              *production-env
  rules:
    - if: "$UNINSTALL == 'production'"

#### >> Automatic

.tagged-production-build:          &tagged-production-build
  <<:                              *production-env
  <<:                              *tags-refs

build-production-image:
  <<:                              *build-app-image
  <<:                              *tagged-production-build
  stage:                           containerize

deploy-production:
  <<:                              *deploy-k8s
  <<:                              *tagged-production-build
  stage:                           deploy

#### CI images

.build-ci-image:                   &build-ci-image
  image:                           quay.io/buildah/stable
  script:
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - ./scripts/generateDockerfile ci |
      buildah bud
      --format=docker
      --tag "$CI_IMAGE" -
    - buildah push --format=v2s2 "$CI_IMAGE"
  after_script:
    - buildah logout --all

build-ci-image-manual:
  <<:                              *build-ci-image
  stage:                           containerize
  rules:
    - if: "$BUILD == 'ci'"

build-ci-image:
  <<:                              *master-refs
  <<:                              *build-ci-image
  stage:                           containerize
  allow_failure:                   true
